plugins {
    id 'java'
    id 'org.jetbrains.dokka' version '0.10.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'org.jetbrains.kotlin.kapt' version '1.3.61'
    id 'io.gitlab.arturbosch.detekt' version '1.5.0'
    id 'io.morethan.jmhreport' version '0.9.0'
}

group 'ray.eldath'
version '0.0.1'

sourceCompatibility = 1.11
targetCompatibility = 1.11

ext {
    jmhVersion = '1.21'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.0'
    // https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-core', version: jmhVersion
    // https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess
    kaptTest group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: jmhVersion

    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20190722'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
}

dokka {
    outputFormat = 'gfm'
    outputDirectory = "$buildDir/dokka"

    configuration {
        reportUndocumented = false

        // Allows linking to documentation of the project's dependencies (generated with Javadoc or Dokka)
        // Repeat for multiple links
        externalDocumentationLink {
            // Root URL of the generated documentation to link with. The trailing slash is required!
            url = new URL("https://commons.apache.org/proper/commons-lang/javadocs/api-release/")

            packageListUrl = new URL("https://commons.apache.org/proper/commons-lang/javadocs/api-release/package-list")
        }

        // Specifies the location of the project source code on the Web.
        // If provided, Dokka generates "source" links for each declaration.
        // Repeat for multiple mappings
        sourceLink {
            // Unix based directory relative path to the root of the project (where you execute gradle respectively).
            path = "src/main/kotlin" // or simply "./"

            // URL showing where the source code can be accessed through the web browser
            url = "https://github.com/Ray-Eldath/sirius/blob/master/src/main/kotlin"
            // remove src/main/kotlin if you use "./" above

            // Suffix which is used to append the line number to the URL. Use #L for GitHub
            lineSuffix = "#L"
        }
    }
}

detekt {
    config = files('detekt.yml')
    buildUponDefaultConfig = true

    reports {
        xml { enabled = false }
        html { enabled = false }
    }
}

task jmh(type: JavaExec) {
    main = 'ray.eldath.sirius.test.jmh.JmhTest'
    classpath = sourceSets.test.runtimeClasspath
    defaultCharacterEncoding = 'UTF-8'
}
jmh.finalizedBy tasks.findByName('jmhReport')

test {
    useJUnitPlatform()
    exclude('**/experiment/**')
    exclude('**/jmh/**')
}

repositories {
    jcenter()
    mavenCentral()
}

[compileKotlin, compileTestKotlin].forEach { it.kotlinOptions.jvmTarget = '11' }
[compileJava, compileTestJava].forEach { it.options.encoding = 'UTF-8' }